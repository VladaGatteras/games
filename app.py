import streamlit as st
import random
import base64
import logging
import os

st.set_page_config(page_title="–ö–≤–µ—Å—Ç –î–Ω—è –†–æ–∂–¥–µ–Ω–∏—è",
                   page_icon="üéÇ", layout="wide")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
log_path = os.path.join(os.path.dirname(__file__), "birthday_quest.log")
logging.basicConfig(filename=log_path, level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")

# --- –§–æ–Ω ---


def set_background_from_file(file_path):
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        with open(file_path, "rb") as image_file:
            encoded_string = base64.b64encode(image_file.read()).decode()
        st.markdown(
            f"""
            <style>
            html, body, .stApp {{
                height: 100%;
                margin: 0;
                padding: 0;
                background-image: url("data:image/png;base64,{encoded_string}");
                background-size: cover;
                background-position: center;
                background-repeat: no-repeat;
                overflow-x: hidden;
            }}
            .block-container {{
                background-color: rgba(255, 255, 255, 0.85);
                padding: 2rem;
                border-radius: 1rem;
                box-shadow: 0 0 10px rgba(0,0,0,0.2);
            }}
            .char-container {{
                text-align: center;
            }}
            /* –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π */
            .char-container img {{
                margin-top: 1em;
            }}
            </style>
            """,
            unsafe_allow_html=True
        )
    except Exception as e:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–∞: {e}")


set_background_from_file("image.png")

# --- –î–∞–Ω–Ω—ã–µ: –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã ---
characters = [
    {
        "name": "–ë–æ—Å—Å –æ—Ç–¥–µ–ª–∞",
        "image": "–ë–æ—Å—Å –æ—Ç–¥–µ–ª–∞.png",
        "questions": [
            {
                "question": "–ß—Ç–æ –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ—Ç –Ω–∞—à –±–æ—Å—Å?",
                "options": ["–ì–æ–≤–æ—Ä–∏—Ç '—Å—Ä–æ—á–Ω–æ'", "–ü—å—ë—Ç —á–∞–π", "–ü–∏—à–µ—Ç –æ—Ç—á—ë—Ç—ã", "–û–ø–∞–∑–¥—ã–≤–∞–µ—Ç"],
                "answer": "–ì–æ–≤–æ—Ä–∏—Ç '—Å—Ä–æ—á–Ω–æ'"
            },
            {
                "question": "–ö–∞–∫–æ–µ —É –Ω–µ–≥–æ —Å—É–ø–µ—Ä–æ—Ä—É–∂–∏–µ?",
                "options": ["–ü–∏—Å—å–º–∞ –≤ Outlook", "Excel-—Ç–∞–±–ª–∏—Ü—ã", "–°–∏–ª–∞ –≤–∑–≥–ª—è–¥–∞", "–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–µ–¥–ª–∞–π–Ω–∞"],
                "answer": "–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–µ–¥–ª–∞–π–Ω–∞"
            }
        ]
    },
    {
        "name": "–ê–ª–∏–Ω–∞",
        "image": "–ê–ª–∏–Ω–∞.png",
        "questions": [
            {
                "question": "–ß—Ç–æ –ª—é–±–∏—Ç –ê–ª–∏–Ω–∞?",
                "options": ["–î–∏–∑–∞–π–Ω", "–ß–∞—Ç GPT", "–®–æ–∫–æ–ª–∞–¥", "–ú–µ–º—ã –ø—Ä–æ –∫–æ—Ç–∏–∫–æ–≤"],
                "answer": "–ú–µ–º—ã –ø—Ä–æ –∫–æ—Ç–∏–∫–æ–≤"
            },
            {
                "question": "–ö–∞–∫—É—é —Ñ—Ä–∞–∑—É –æ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç —á–∞—â–µ –≤—Å–µ–≥–æ?",
                "options": ["–Ø —É–∂–µ –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞", "–≠—Ç–æ –º–æ–∂–Ω–æ –≤ Notion", "–©–∞ –∑–∞–ª—å—é –≤ –§–∏–≥–º—É", "–û–π, —ç—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–ª"],
                "answer": "–©–∞ –∑–∞–ª—å—é –≤ –§–∏–≥–º—É"
            }
        ]
    },
    {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –µ—â—ë –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç", "image": "–¢—Ä–µ—Ç–∏–π.png", "questions": []},
    {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –µ—â—ë –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç", "image": "–ß–µ—Ç–≤—ë—Ä—Ç—ã–π.png", "questions": []},
    {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –µ—â—ë –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç", "image": "–ü—è—Ç—ã–π.png", "questions": []},
    {"name": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –µ—â—ë –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç", "image": "–®–µ—Å—Ç–æ–π.png", "questions": []}
]

# --- –§—É–Ω–∫—Ü–∏–∏-–∫–æ–ª–±—ç–∫–∏ ---


def select_character(index):
    st.session_state.character = characters[index]
    st.session_state.stage = 0
    st.session_state.correct = 0


def check_answer():
    char = st.session_state.character
    stage = st.session_state.stage
    q = char["questions"][stage]
    selected = st.session_state.get(f"q{stage}")
    if selected == q["answer"]:
        st.session_state.correct += 1
        st.session_state.stage += 1
    else:
        st.session_state.error = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---


# –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ä—è–¥–∞
st.markdown("<br>", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ä—è–¥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º head.png
header_cols = st.columns(7)
with header_cols[3]:
    st.image("head.png", width=300)

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –ø–æ —Ü–µ–Ω—Ç—Ä—É
instr_cols = st.columns(3)
with instr_cols[1]:
    st.markdown(
        "<p style='text-align: center; font-size: 20px;'>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <strong>–í—ã–±—Ä–∞—Ç—å</strong>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</p>",
        unsafe_allow_html=True,
    )

# –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—è–¥ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
if "character" not in st.session_state:
    char_cols = st.columns(len(characters))
    for i, char in enumerate(characters):
        with char_cols[i]:
            with open(char['image'], "rb") as img_file:
                img_data = base64.b64encode(img_file.read()).decode()
            st.markdown(
                f"""
                <div class="char-container">
                    <img src="data:image/png;base64,{img_data}" width="120">
                    <p><strong>{char['name']}</strong></p>
                </div>
                """,
                unsafe_allow_html=True
            )
            col_left, col_center, col_right = st.columns([1, 2, 1])
            with col_center:
                st.button(
                    "–í—ã–±—Ä–∞—Ç—å", key=f"select_{i}", on_click=select_character, args=(i,))
# –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
else:
    char = st.session_state.character
    st.subheader(f"–¢—ã –≤—ã–±—Ä–∞–ª: {char['name']}")
    if len(char.get("questions", [])) > 0 and st.session_state.stage < len(char["questions"]):
        stage = st.session_state.stage
        q = char["questions"][stage]
        st.subheader(f"–í–æ–ø—Ä–æ—Å {stage + 1}: {q['question']}")
        st.radio("–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç:", q["options"], key=f"q{stage}")
        st.button("–û—Ç–≤–µ—Ç–∏—Ç—å", key=f"submit_{stage}", on_click=check_answer)
        if "error" in st.session_state:
            st.error(st.session_state.error)
            del st.session_state.error
    else:
        st.subheader("üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        st.markdown(f"**–¢—ã –ø—Ä–æ—à—ë–ª –ø—É—Ç—å —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º:** {char['name']}")
        st.markdown("---")
        st.markdown("### üéÅ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø–æ–¥–∞—Ä–æ–∫ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫—É:")
        st.markdown(
            "**üí∏ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:** [–ü–µ—Ä–µ–≤–µ—Å—Ç–∏](https://your-donation-link.com)")
        st.markdown("**üì± –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** +7-999-123-4567")
        if st.button("–Ø –∑–∞–¥–æ–Ω–∞—Ç–∏–ª! –û—Ç–∫—Ä—ã—Ç—å –±–æ–Ω—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"):
            bonus = random.choice([
                {"name": "–ó–æ–ª–æ—Ç–æ–π –î–æ–Ω–∞—Ç–æ—Ä", "class": "–ì–µ—Ä–æ–π –æ—Ñ–∏—Å–∞",
                    "power": "–ü—Ä–∏–∑—ã–≤–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏"},
                {"name": "–°—Ç—Ä–∞–∂ –ü—Ä–∞–∑–¥–Ω–∏–∫–∞", "class": "–¢–∞–Ω–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
                    "power": "–ó–∞—â–∏—â–∞–µ—Ç –≤–µ—Å–µ–ª—å–µ –æ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤"}
            ])
            st.balloons()
            st.success("–¢—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ–Ω—É—Å–Ω–æ–≥–æ –≥–µ—Ä–æ—è!")
            st.markdown(
                f"üåü **{bonus['name']}**\n\n–ö–ª–∞—Å—Å: *{bonus['class']}*\n\n–°–ø–µ—Ü—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: `{bonus['power']}`")
        if st.button("–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
